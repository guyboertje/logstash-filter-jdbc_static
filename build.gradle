import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'
}
configurations {
    pluginRequires
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.derby:derby:10.14.2.0'
    api 'org.apache.derby:derbyclient:10.14.2.0'
    api 'com.zaxxer:HikariCP:3.2.0'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'org.jruby:jruby-core:9.1.13.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.6.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.6.2'
    implementation fileTree(dir: logstashCoreGemPath, include: '**/*.jar')

    pluginRequires 'org.apache.derby:derby:10.14.2.0'
    pluginRequires 'org.apache.derby:derbyclient:10.14.2.0'
    pluginRequires 'com.zaxxer:HikariCP:3.2.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'org.mockito:mockito-core:2.20.1'
    testImplementation fileTree(dir: logstashCoreGemPath, include: '**/*.jar')
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group = 'org.logstash.jdbc_static'
version '1.0.6'
description = """JDBC Static Filter, a Logstash plugin - the Java parts"""

String vendorPathPrefix = "vendor/jar-dependencies"

task copyJar(type: Copy) {
    String projectGroupPath = project.group.replaceAll('\\.', '/')
    String target = "${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}"
    from jar // here it automatically reads jar file produced from jar task
    into target
}

task generateGemJarRequiresFile  {
    doLast {
        File jars_file = file('lib/logstash-filter-jdbc_static_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.pluginRequires.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

task vendor {
    doLast {
        configurations.api.allDependencies.each { dep ->
            File f = configurations.pluginRequires.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
    }
}

vendor.dependsOn(jar, copyJar, generateGemJarRequiresFile)
